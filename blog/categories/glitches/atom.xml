<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Glitches, | Strangely Specific and Very Odd]]></title>
  <link href="http://Gastove.github.io/blog/categories/glitches/atom.xml" rel="self"/>
  <link href="http://Gastove.github.io/"/>
  <updated>2013-09-15T08:48:47-07:00</updated>
  <id>http://Gastove.github.io/</id>
  <author>
    <name><![CDATA[Ross M. Donaldson]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Scalatra, Scalate, Jade, and Markdown: Together at Last]]></title>
    <link href="http://Gastove.github.io/blog/2013/09/03/scalatra/"/>
    <updated>2013-09-03T09:10:00-07:00</updated>
    <id>http://Gastove.github.io/blog/2013/09/03/scalatra</id>
    <content type="html"><![CDATA[<p>So I’m awfully fond of Scala, so when I got going building web apps, <a href="www.scalatra.org">Scalatra</a> seemed like an excellent choice. (I’m natively wary of things like Rails, and the Play! framework seemed more-or-less of Rails’ ilk.) Scalatra supports templating via <a href="http://scalate.fusesource.org">Scalate</a>, which is as charming as it is flexible – that is, very. As part of that flexibility, Scalate supports more templating languages than I really need. I like the terse, Haml-based <a href="http://jade-lang.com/">Jade</a> myself – particularly because it supports <a href="http://daringfireball.net/projects/markdown/syntax">markdown</a>, meaning your templates can be lovely, dry things.</p>

<!-- more -->

<p>For instance:</p>

<p><code>jade
.foo
  :markdown
    This will make a paragraph inside a 'foo' element from your CSS, close it correctly, and finish with a properly tagged [hyperlink](www.foo.bar).
</code></p>

<p>Lovely! Only one problem: it was broken out of the box. Any inclusion of the <code>:markdown</code> filter caused the compiler to throw a <code>java.lang.NoSuchMethodError</code> exception. Fan. Tastic.</p>

<p>So I started hacking, and tried a bunch of things that failed – including, ironically, the correct answer implemented slightly incorrectly. I owe my eventual success to <a href="http://stackoverflow.com/questions/18345085/java-lang-nosuchmethoderror-in-scalatra-using-scalate-with-markdown">Stack Overflow</a>. What I suspected turned out to be correct, and goes a little like this:</p>

<p>Scalatra comes pre-packed with its own version of Scalate; Scalate comes pre-packaged with its own version of Jade. The problem is, neither Scalatra nor Scalate ever mention that what isn’t baked in <em>anywhere</em> is Scalate’s markdown support, which lives in <a href="http://maven.apache.com">Maven</a>. I got an inkling of this, and tried:</p>

<p><code>scala build.sbt
libraryDependencies += "org.fusesource.scalamd" % "scalamd" % "1.5"
</code></p>

<p>There are two errors here; the most problematic is the number 5. <code>scalamd 1.5</code> is built against Scala 2.8. For my own version, Scala 2.10.0, you need version 1.6, plus an extra % for correct lookup formatting, so:</p>

<p><code>scala build.sbt
libraryDependencies += "org.fusesource.scalamd" %% "scalamd" % "1.6"
</code></p>

<p>BOOM. Works like a charm. And it’s an easy fix! I just wish <em>somebody</em>, anybody at either Scalatra or Scalate HQ would mention the damn dependency! (I’ve poked at them via Twitter, but while both projects are under active development, the Twitter feeds… aren’t, alas.)</p>

<p>In any case, I hope this saves people some time. Onwards, to better styled, DRYer, lovelier web apps!</p>
]]></content>
  </entry>
  
</feed>
