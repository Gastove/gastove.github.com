<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Strangely Specific and Very Odd]]></title>
  <link href="http://Gastove.github.io/atom.xml" rel="self"/>
  <link href="http://Gastove.github.io/"/>
  <updated>2013-09-03T09:51:23-07:00</updated>
  <id>http://Gastove.github.io/</id>
  <author>
    <name><![CDATA[Ross M. Donaldson]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Scalatra, Scalate, Jade, and Markdown: Together at Last]]></title>
    <link href="http://Gastove.github.io/blog/2013/09/03/scalatra/"/>
    <updated>2013-09-03T09:10:00-07:00</updated>
    <id>http://Gastove.github.io/blog/2013/09/03/scalatra</id>
    <content type="html"><![CDATA[<p>So I’m awfully fond of Scala, so when I got going building web apps, <a href="www.scalatra.org">Scalatra</a> seemed like an excellent choice. (I’m natively wary of things like Rails, and the Play! framework seemed more-or-less of Rails’ ilk.) Scalatra supports templating via <a href="http://scalate.fusesource.org">Scalate</a>, which is as charming as it is flexible – that is, very. As part of that flexibility, Scalate supports more templating languages than I really need. I like the terse, Haml-based <a href="http://jade-lang.com/">Jade</a> myself – particularly because it supports <a href="http://daringfireball.net/projects/markdown/syntax">markdown</a>, meaning your templates can be lovely, dry things.</p>

<!-- more -->

<p>For instance:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class="jade"><span class="line"><span class="nc">.foo</span>
</span><span class="line">  <span class="nd">:markdown</span>
</span><span class="line">    <span class="nd">This will make a paragraph inside a &#39;foo&#39; element from your CSS, close it correctly, and finish with a properly tagged [hyperlink](www.foo.bar).</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Lovely! Only one problem: it was broken out of the box. Any inclusion of the <code>:markdown</code> filter caused the compiler to throw a <code>java.lang.NoSuchMethodError</code> exception. Fan. Tastic.</p>

<p>So I started hacking, and tried a bunch of things that failed – including, ironically, the correct answer implemented slightly incorrectly. I owe my eventual success to <a href="http://stackoverflow.com/questions/18345085/java-lang-nosuchmethoderror-in-scalatra-using-scalate-with-markdown">Stack Overflow</a>. What I suspected turned out to be correct, and goes a little like this:</p>

<p>Scalatra comes pre-packed with its own version of Scalate; Scalate comes pre-packaged with its own version of Jade. The problem is, neither Scalatra nor Scalate ever mention that what isn’t baked in <em>anywhere</em> is Scalate’s markdown support, which lives in <a href="http://maven.apache.com">Maven</a>. I got an inkling of this, and tried:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>build.sbt</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="scala"><span class="line"><span class="n">libraryDependencies</span> <span class="o">+=</span> <span class="s">&quot;org.fusesource.scalamd&quot;</span> <span class="o">%</span> <span class="s">&quot;scalamd&quot;</span> <span class="o">%</span> <span class="s">&quot;1.5&quot;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>There are two errors here; the most problematic is the number 5. <code>scalamd 1.5</code> is built against Scala 2.8. For my own version, Scala 2.10.0, you need version 1.6, plus an extra % for correct lookup formatting, so:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>build.sbt</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="scala"><span class="line"><span class="n">libraryDependencies</span> <span class="o">+=</span> <span class="s">&quot;org.fusesource.scalamd&quot;</span> <span class="o">%%</span> <span class="s">&quot;scalamd&quot;</span> <span class="o">%</span> <span class="s">&quot;1.6&quot;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>BOOM. Works like a charm. And it’s an easy fix! I just wish <em>somebody</em>, anybody at either Scalatra or Scalate HQ would mention the damn dependency! (I’ve poked at them via Twitter, but while both projects are under active development, the Twitter feeds… aren’t, alas.)</p>

<p>In any case, I hope this saves people some time. Onwards, to better styled, DRYer, lovelier web apps!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Setting up Emacs Prelude for Multiple SQL Databases and Query Development]]></title>
    <link href="http://Gastove.github.io/blog/2013/08/26/emacs-for-sql/"/>
    <updated>2013-08-26T20:47:00-07:00</updated>
    <id>http://Gastove.github.io/blog/2013/08/26/emacs-for-sql</id>
    <content type="html"><![CDATA[<p>Ah, emacs. What can’t you do?</p>

<p>…actually, that’s the problem. Emacs, for all its splendor, can be an infinite rabbit hole of customization, modification, tweaking, scripting, and parens. I recently discovered <a href="www.github.com/bbatsov/prelude">Emacs Prelude</a>, and I recommend it heartily. It does, for the most part, what it says on the tin: “The final product offers an easy to use Emacs configuration for Emacs newcomers and lots of additional power for Emacs power users.” Check and check.</p>

<p>That still leaves some customization to be done, and a particularly common use case in my work is SQL query development, often in the context of embedded SQL within an automated reporting framework. Developing queries with SQL GUIs like MySQL WorkBench and Sequel Pro is lovely… but I don’t always have access to them, and copy-pasting queries from one editor to another is a lovely way to introduce bizarre characters into an otherwise pristine query. (And who doesn’t love debugging those!) A better answer would be to manipulate embedded SQL in-place – in this case, from within Emacs. Fortunately, this isn’t hard.</p>

<!--more-->

<p>Emacs has a set of built-in protocols, accessible via <code>sql-*</code> (e.g., <code>sql-mysql</code>). They work beautifully, allowing a parallel SQL ‘interactive’ (or ‘SQLi’) buffer that’s effectively an augmented SQL CLI. The augmentation allows you to ship SQL from the buffer you’re editing in to the SQLi buffer for evaluation using one of three basic approaches:</p>

<ul>
  <li><code>sql-send-buffer</code> – fine for one-off query development but otherwise a little too broad</li>
  <li><code>sql-send-paragraph</code> – better; tries to auto-detect a delimited unit of SQL, but doesn’t always work</li>
  <li><code>sql-send-region</code> – ideal. Ship an arbitrary region in to the SQLi buffer</li>
</ul>

<p>The last issue to tackle, then, is this: <code>sql-*</code> mode can’t autoload your local DB configs. Hooray! If you have a <code>my.conf</code> you’re particularly proud of, it wont avail you here - instead, a command like <code>sql-mysql</code> will leave you entering in your credentials over and over again. There are some <a href="http://stackoverflow.com/questions/5734965/how-can-i-get-emacs-sql-mode-to-use-the-mysql-config-file-my-cnf">very good</a> StackOverflow posts about getting around, this, but they all miss two points: I really don’t want to have to store my DB credentials in plain text; I have to connect to like twelve different databases.</p>

<p>My solution (written up in my Prelude <code>custom.el</code>) looks like so:</p>

<div class="bogus-wrapper"><notextile><figure class="code"> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
<span class="line-number">29</span>
</pre></td><td class="code"><pre><code class="cl"><span class="line"><span class="p">(</span><span class="k">setq</span> <span class="nv">sql-connection-alist</span>
</span><span class="line">      <span class="o">&#39;</span><span class="p">((</span><span class="nv">db01</span>
</span><span class="line">         <span class="p">(</span><span class="nv">sql-product</span> <span class="ss">&#39;mysql</span><span class="p">)</span>
</span><span class="line">         <span class="p">(</span><span class="nv">sql-server</span> <span class="nv">my-server-name</span><span class="p">)</span>
</span><span class="line">         <span class="p">(</span><span class="nv">sql-user</span> <span class="p">(</span><span class="nv">getenv</span> <span class="s">&quot;MYSQL_USER&quot;</span><span class="p">))</span>
</span><span class="line">         <span class="p">(</span><span class="nv">sql-password</span> <span class="p">(</span><span class="nv">getenv</span> <span class="s">&quot;MYSQL_PASSWORD&quot;</span><span class="p">))</span>
</span><span class="line">         <span class="p">(</span><span class="nv">sql-database</span> <span class="s">&quot;wordace&quot;</span><span class="p">)</span>
</span><span class="line">         <span class="p">(</span><span class="nv">sql-port</span> <span class="mi">3306</span><span class="p">))</span>
</span><span class="line">        <span class="p">(</span><span class="nv">db02</span>
</span><span class="line">         <span class="p">(</span><span class="nv">sql-product</span> <span class="ss">&#39;mysql</span><span class="p">)</span>
</span><span class="line">         <span class="p">(</span><span class="nv">sql-server</span> <span class="nv">my-other-server-name</span><span class="p">)</span>
</span><span class="line">         <span class="p">(</span><span class="nv">sql-user</span> <span class="p">(</span><span class="nv">getenv</span> <span class="s">&quot;MYSQL_USER&quot;</span><span class="p">))</span>
</span><span class="line">         <span class="p">(</span><span class="nv">sql-password</span> <span class="p">(</span><span class="nv">getenv</span> <span class="s">&quot;MYSQL_PASSWORD&quot;</span><span class="p">))</span>
</span><span class="line">         <span class="p">(</span><span class="nv">sql-database</span> <span class="s">&quot;&quot;</span><span class="p">)</span>
</span><span class="line">         <span class="p">(</span><span class="nv">sql-port</span> <span class="mi">3306</span><span class="p">))))</span>
</span><span class="line">
</span><span class="line"><span class="p">(</span><span class="nb">defun</span> <span class="nv">sql-connect-preset</span> <span class="p">(</span><span class="nv">name</span><span class="p">)</span>
</span><span class="line">  <span class="s">&quot;Connect to a predefined SQL connection listed in `sql-connection-alist&#39;&quot;</span>
</span><span class="line">  <span class="p">(</span><span class="nb">eval</span> <span class="o">`</span><span class="p">(</span><span class="k">let</span> <span class="o">,</span><span class="p">(</span><span class="nb">cdr</span> <span class="p">(</span><span class="nb">assoc</span> <span class="nv">name</span> <span class="nv">sql-connection-alist</span><span class="p">))</span>
</span><span class="line">    <span class="p">(</span><span class="k">flet</span> <span class="p">((</span><span class="nv">sql-get-login</span> <span class="p">(</span><span class="k">&amp;rest</span> <span class="nv">what</span><span class="p">)))</span>
</span><span class="line">      <span class="p">(</span><span class="nv">sql-product-interactive</span> <span class="nv">sql-product</span><span class="p">)))))</span>
</span><span class="line">
</span><span class="line"><span class="c1">;; Function to load a DB based on its short name</span>
</span><span class="line"><span class="p">(</span><span class="nb">defun</span> <span class="nv">sql-connect-preset-by-name</span> <span class="p">(</span><span class="nv">name</span><span class="p">)</span>
</span><span class="line">  <span class="s">&quot;Connect to a DB by entering it&#39;s short name&quot;</span>
</span><span class="line">  <span class="p">(</span><span class="nv">interactive</span> <span class="s">&quot;sDB Name: &quot;</span><span class="p">)</span>
</span><span class="line">  <span class="p">(</span><span class="nv">sql-connect-preset</span> <span class="ss">&#39;name</span><span class="p">))</span>
</span><span class="line">
</span><span class="line"><span class="p">(</span><span class="nv">global-set-key</span> <span class="p">(</span><span class="nv">kbd</span> <span class="s">&quot;M-s q&quot;</span><span class="p">)</span> <span class="ss">&#39;sql-connect-preset-by-name</span><span class="p">)</span> <span class="c1">; Connect to a db preset by name</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>This pleases the hell out of me. Hitting <code>M-s q</code> prompts me for a server short-name (in this example, ‘db01’ or ‘db02’), and loads my credentials out of environment variables where they’re safe and sound. Win!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Thoughts on this Site So Far]]></title>
    <link href="http://Gastove.github.io/blog/2013/08/11/thoughts_on_this_site_so_far/"/>
    <updated>2013-08-11T16:58:00-07:00</updated>
    <id>http://Gastove.github.io/blog/2013/08/11/thoughts_on_this_site_so_far</id>
    <content type="html"><![CDATA[<p>Huh. Okay. This… this kinda seems to be working. So far, this has been an interesting project. Over the last two days, I’ve spun up a personal web page and a blog, both from code (that is, not using WYSIWYG editors or 3rd Party stuff). I’m using what I can only describe as an Ecclectic Blend of tools – something I have mixed feelings about. Lets do a little review, after the cut:</p>

<!--more-->

<h4 id="scalatra">Scalatra</h4>

<p>My main site is written in Scala, hosted on Heroku. In all, hosting has been one of the easiest parts; Heroku has some special configuration requirements, but  provides very good, accurate docs, and setup is mostly a breeze. There are, it turns out, several web frameworks for Scala – most notably <a href="http://liftweb.net/">Lift</a>, <a href="http://www.playframework.com/">Play</a>, and <a href="www.scalatra.org">Scalatra</a>. I’ve gone with the last of these; so far, it’s been easy as can be. Scalatra is intuitive, plays well with Heroku, and is even decently well documented. HTML Templating is handled with Scalate.</p>

<p>Ah. Scalate.</p>

<p>Scalate is the main game in town for Scala HTML templates, as near as I can tell. On the up side, it’s powerful and fast and pretty robust. It supports more templating choices than I’d actually care to make, and that might be the down side. For mostly arbitrary reasons, I got going with Jade – which is a terse form of Scaml, which in turn is Scala Haml. </p>

<p>Perhaps you’ve already intuited the problem. There are a bunch of templating choices, and I picked the one that’s the most abstreuse, the least interoperable, and the hardest to find support for. Scalatra doesn’t <em>actually</em> support all of Jade (<em>cough</em> inheritance), so finding clear help for Scalatra Jade vs. Jade Itsownself is kind of a mess. </p>

<p>All that said: Jade is both easy and fast to write, <em>very</em> DRY, and about as powerful as you could want. I’ve made my bed, and now I’ll lay in it – and I don’t think that’s too bad.</p>

<h4 id="octopress">Octopress</h4>

<p>I have fallen almost instantly in love with <a href="http://octopress.org/">Octopress</a>, a blogging framework that defaults to publishing on Github Pages (as it should be). So far it has been an absolute pleasure to use, though I cannot say the same for most of the themes I’ve tried. Now: fussing and whining about themes is maybe a dodgy proposition for a guy who couldn’t write one to save himself from sharks. But then, that’s why I went hunting for third party Octopress themes in the first place. There are <a href="https://github.com/imathis/octopress/wiki/3rd-Party-Octopress-Themes">a lot of them</a>. They feature truly beautiful page stylings and truly peculiar CSS choices – like defaulting to centering the text inside a code block. That’s right. Centered. Code. </p>

<p>Beyond some CSS-hackery to get code aligned correctly, my only other real trick was setting up syntax highlighting. (Octopress comes with Solar built-in, but I’m not, uh, a fan of Solar.) Thanks to some <a href="http://blog.alestanis.com/2013/02/04/octopress-and-the-twilight-color-scheme/">very good directions</a>, getting Twilight going didn’t take long at all. And now, I get code blocks like this:</p>

<div><table class="CodeRay"><tr>
  <td class="line-numbers" title="double click to toggle" ondblclick="with (this.firstChild.style) { display = (display == '') ? 'none' : '' }"><pre><a href="#n1" name="n1">1</a>
<a href="#n2" name="n2">2</a>
<a href="#n3" name="n3">3</a>
<a href="#n4" name="n4">4</a>
<a href="#n5" name="n5">5</a>
<a href="#n6" name="n6">6</a>
<a href="#n7" name="n7">7</a>
<a href="#n8" name="n8">8</a>
</pre></td>
  <td class="code"><pre><span class="keyword">def</span> <span class="function">fizzbuzz</span>:
    <span class="keyword">for</span> x <span class="keyword">in</span> <span class="predefined">range</span>(<span class="integer">0</span>, <span class="integer">101</span>):
        output = <span class="string"><span class="delimiter">&quot;</span><span class="delimiter">&quot;</span></span>
        <span class="keyword">if</span> x % <span class="integer">3</span> == <span class="integer">0</span>:
            output += <span class="string"><span class="delimiter">&quot;</span><span class="content">fizz</span><span class="delimiter">&quot;</span></span>
        <span class="keyword">if</span> x % <span class="integer">5</span> == <span class="integer">0</span>:
            output += <span class="string"><span class="delimiter">&quot;</span><span class="content">buzz</span><span class="delimiter">&quot;</span></span>
        <span class="keyword">print</span> output
</pre></td>
</tr></table>
</div>

<p>Being the sort of doofus I am, I got Octopress working, then trotted out to find an emacs plugin to run it. Octopress is a framework that wraps the thorny-but-powerfull Jekyll blogging engine; it figures the emacs package would be <a href="https://github.com/nibrahim/Hyde">Hyde</a>. </p>

<p>I want to like Hyde. I really do. It does all these things I want done – integrating the various <code>rake</code> commands into my text editor. But man… it just doesn’t actually work quite right. If I can hack it into Working, I’ll post about it here, but for now I’m Octopress-ing via the shell.</p>

<h4 id="in-conclusion">In Conclusion</h4>

<p>The web is a lovely place, with a remarkable number of very cool pieces that don’t take long to pull together. It takes a little time, sure, and some command line know-how – but I know have a web presence that makes me smile. </p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Correcting Text Alignment for Gists in Octopress Themes]]></title>
    <link href="http://Gastove.github.io/blog/2013/08/11/correcting-text-alignment-for-gists-in-octopress-themes/"/>
    <updated>2013-08-11T15:19:00-07:00</updated>
    <id>http://Gastove.github.io/blog/2013/08/11/correcting-text-alignment-for-gists-in-octopress-themes</id>
    <content type="html"><![CDATA[<p>So I’m setting up my hella sweet Octopress blog and I’m feeling pretty sharp and I decide it’s time for a theme. What could be better! Gussy the place up a bit. There are <a href="https://github.com/imathis/octopress/wiki/3rd-Party-Octopress-Themes">bunches of themes</a> available, so that bit was pretty simple. Installation: boom! Previews: bam! All exactly as easy as advertised. </p>

<p>To celebrate, I decide to publish my first github gist. </p>

<p>And all the text aligns center.</p>

<p>…</p>

<p>Okay so I have no idea why anybody would ever, ever do that, but the answer seems to go like so: there’s an SCSS template in <code>sass/parts</code> called <code>_article.scss</code>. It contains a CSS entry, so (many things removed for brevity):</p>

<div><table class="CodeRay"><tr>
  <td class="line-numbers" title="double click to toggle" ondblclick="with (this.firstChild.style) { display = (display == '') ? 'none' : '' }"><pre><a href="#n1" name="n1">1</a>
<a href="#n2" name="n2">2</a>
<a href="#n3" name="n3">3</a>
<a href="#n4" name="n4">4</a>
<a href="#n5" name="n5">5</a>
<a href="#n6" name="n6">6</a>
<a href="#n7" name="n7">7</a>
<a href="#n8" name="n8">8</a>
<a href="#n9" name="n9">9</a>
<strong><a href="#n10" name="n10">10</a></strong>
<a href="#n11" name="n11">11</a>
<a href="#n12" name="n12">12</a>
<a href="#n13" name="n13">13</a>
<a href="#n14" name="n14">14</a>
<a href="#n15" name="n15">15</a>
<a href="#n16" name="n16">16</a>
<a href="#n17" name="n17">17</a>
</pre></td>
  <td class="code"><pre> article{
    .entry-content{
        table{
            background: $color-gray04;
            border: 1px solid $color-gray03;
            border-spacing: 0;
            margin-top: 10px;
            th{
                background: $color-gray03;
                padding: 0 15px;
            }
            td{
                text-align: center;
            }
        }
    }
}
</pre></td>
</tr></table>
</div>

<p>That little td definition is the one that gets you, and here’s a thing that threw me off for a bit: this same file exists (almost identically) inside <code>.themes/[Your Theme Name]/sass/parts/</code> – and changing the theme-specific file does <em>not</em> override the stuff in <code>[Blog]/sass/parts</code>. Only tweaking the top-level definiton put my gist back over to the left. </p>

<p>I’m pretty much a CSS n00b, so it’s entirely likely there’s something derpy I’m doing/not getting with this. If any Octopress ninjas out in Blogland have a clearer idea of what’s going on than I do, <em>please</em>… oh wait. This theme doesn’t support comments. </p>

<p>Tweet at me. That’s it. <a href="http://www.twitter.com/Gastove">With this handy link</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Pure Show-And-Tell: My First Gist]]></title>
    <link href="http://Gastove.github.io/blog/2013/08/11/pure-show-and-tell-my-first-gist/"/>
    <updated>2013-08-11T10:53:00-07:00</updated>
    <id>http://Gastove.github.io/blog/2013/08/11/pure-show-and-tell-my-first-gist</id>
    <content type="html"><![CDATA[<p>And now, a barefaced excuse to muck about with Octopress markdown and plugins. Presenting: my first gist. Do you care? The whole works (and some verbiage) after the cut.</p>

<!--more-->

<p>While ambling about the internet trying to style my schamncy new web page, I did two things, one clever and one not: </p>

<ul>
  <li><strong>Clever</strong>: I realized I didn’t want to write my own CSS sheets, because fuck that noise.</li>
  <li><strong>Not-So-Much</strong>: I forgot about Twitter Bootstrap. </li>
</ul>

<p>I found the pleasing, if peculiar, <a href="www.getskeleton.com">Skeleton.css</a> – which is nice looking and open source and free, and rescales (reasonably) well on mobile. Only problem: the provided page template is in straight HTML, and I’m writing in Scalate’s implementation of Jade (itself a reduction of Scaml, which is Scala Haml. Oye.) So, I re-wrote the thing. Maybe this will help another person, ever? (Yeah, I think it’s a funny line too.)</p>

<h3 id="the-gist">The Gist</h3>
<div><script src="https://gist.github.com/6201942.js"></script>
<noscript><pre><code /></pre></noscript></div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[O HAI]]></title>
    <link href="http://Gastove.github.io/blog/2013/08/11/o-hai/"/>
    <updated>2013-08-11T10:39:00-07:00</updated>
    <id>http://Gastove.github.io/blog/2013/08/11/o-hai</id>
    <content type="html"><![CDATA[<p>Well, fascinating. I’ve got a blog again now. I haven’t had one of these in a bit; no time, no reason, really. I used to blog about food – but those days are not these days. Maybe I’ll write about food again?</p>

<p>Anyways. This is mostly blather-based Lorem Ipsum. This blog needs some CSS, and quick; I want to make sure this thing looks good on the Mobiles and the Small Screens, so I needs some content. More soon.</p>
]]></content>
  </entry>
  
</feed>
